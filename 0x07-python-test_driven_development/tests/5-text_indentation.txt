===============================
4. Text indentation module
===============================

Import module:
==============
    >>> text_indentation = __import__('5-text_indentation').text_indentation


Function:
=========
Write a function that prints a text with 2 new lines after
each of these characters: ., ? and :


Notes:
===========
    * text must be a string, otherwise raise a TypeError exception
    with the message 'text must be a string'.

    * There should be no space at the beginning or at the
    end of each printed line.


TC: Code without Parameters
=========================

Test case 1: A test case without parameters

    >>> text_indentation()
    Traceback (most recent call last):
    TypeError: text_indentation() missing 1 required positional argument: 'text'


TC: Code with correct Parameters
=============================

Test case 1: A test case with a short text

    >>> text_indentation('Hello')
    Hello

Test case 2: A test case with a short text and a character for 2 new lines

    >>> text_indentation('Hi There?')
    Hi There?
    <BLANKLINE>

Test case 3: A test case with a short text and characters for 6 new lines

    >>> text_indentation("Hello world. Monty Python? It's is:")
    Hello world.
    <BLANKLINE>
    Monty Python?
    <BLANKLINE>
    It's is:
    <BLANKLINE>

Test case 4: A test case with only spaces and characters to prints newlines

    >>> text_indentation("   ?:.   ")
    ?
    <BLANKLINE>
    :
    <BLANKLINE>
    .
    <BLANKLINE>

TC: Code with Incorrect Parameters
===============================

Test case 1: A test case with an integer parameter

    >>> text_indentation(1)
    Traceback (most recent call last):
    TypeError: text must be a string

Test case 2: A test case with boolean parameter

    >>> text_indentation(True)
    Traceback (most recent call last):
    TypeError: text must be a string

Test case 3: A test case with a data type parameter

    >>> text_indentation(str)
    Traceback (most recent call last):
    TypeError: text must be a string
